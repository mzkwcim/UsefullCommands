#Odświerzanie sterowników graficznych
WIN + CTRL + SHIFT + B

#dodawanie atrybutu ukryty
gi 'C:\Users\ak582\Desktop\Testowy' | % { $_.Attributes = ($_.Attributes -bor [System.IO.FileAttributes]::Hidden) }

#usuwanie atrybutu ukryty
gi 'C:\Users\ak582\Desktop\Testowy' -fo | % { $_.Attributes = ($_.Attributes -band (-bnot [System.IO.FileAttributes]::Hidden))}

#pozyskanie przybliżonego czasu powstania konta lokalnego, zakładając że informacji nie można znaleźć w winevent i metadane pliku nie zostały zmodyfikowane, można użyć bez ToString i Trim
((gci $home).CreationTime | sort | select -F 1).ToString().Trim()

#wyciąganie pliku z konkretnym rozszerzeniem
(gci -rec $home).Extension | sls "e"

#wyciąganie nazw plików
(gci -rec $home).Name | sls "e"

#wyciąganie zawartości plików
gci -rec $home | sls "e"

#Zarejestrowanie Eventu z efektem dźwiekowym
Register-WmiEvent -Query "SELECT * FROM win32_DeviceChangeEvent" -Action {Add-Type -AssemblyName System.Speech; [Speech.Synthesis.SpeechSynthesizer]::New().Speak("Cokolwiek")}

#wyrejestrowanie Eventu po ID, id zamień na id swojego eventu
Unregister-Event -SubscriptionId 1

#usuwanie poświadczeń z poświadczeń systemu windows
cmdkey /delete:poświadczenie/ippoświadczenia do usunięcia

#usuwanie wszystkich poświadczeń
cmdkey /list | Where { $_ -match "Target:" } | % { cmdkey /delete:($_ -replace "Target: ").Trim(); cmdkey /delete /ras }

#historia paska uruchom
$i=gp HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\RunMRU;$i.MRUList.ToCharArray()|%{$i.$_}

#historia wpisywania poleceń
gc (Get-PSReadLineOption).HistorySavePath

#usuwanie historii powershella 
ri (Get-PSReadLineOption).HistorySavePath

#wylistowanie wszystkich uprawnień
$i=[System.Security.AccessControl.FileSystemRights];$i::GetValues($i)|select -u|%{$_}

#utworzenie skrótu notatnika w menu kontekstowym
ni -Path 'Registry::HKEY_CLASSES_ROOT\Directory\Background\shell\Notepad\command' -Force | sp -Name '(default)' -Value 'c:\windows\notepad.exe'

#przeszukiwanie rejestru roota
gci -rec 'Registry::HKEY_CLASSES_ROOT\' -Force | where -Property Property -Like '*account*'

#usuwanie wszystkich plików z jumplisty ze sprawdzaniem czy ścieżka istnieje
if (Test-Path "$env:APPDATA\Microsoft\Windows\Recent" -PathT C) { gci "$env:APPDATA\Microsoft\Windows\Recent" | ri -Fo }
$recentItemsPath = Join-Path $env:APPDATA 'Microsoft\Windows\Recent'; if (Test-Path $recentItemsPath -PathType C) { gci -Path $recentItemsPath | ri -Fo } 

#jw bez sprawdzania czy ścieżka istnieje
gci (Join-Path $env:APPDATA 'Microsoft\Windows\Recent') | ri -Fo
gci "$env:APPDATA\Microsoft\Windows\Recent" | ri -Fo 

#odblokowanie i zablokowanie konta administracyjnego w windowsie, potrzebne uprawnienia administratorskie
glu -n administrator | dlu
glu -n administrator | elu

#trawłe załączenie dysku
net use <nazwa dysku> /persistance:yes

#wyszukanie wszystkich skrótów w systemie
gci c:\ -fi *.lnk -Re

#chowanie okna powershella
saps powershell.exe
sleep 5
$hwnd = (gps -Name powershell | Select -F 1).MainWindowHandle
Add-Type @"
    using System;
    using System.Runtime.InteropServices;
    
    public class User32 {
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    }
"@
[User32]::ShowWindow($hwnd, 0)

#wyłączenie powershella 2.0
Disable-WindowsOptionalFeature -o -F MicrosoftWindowsPowerShellV2
sp "HKLM:\Software\Microsoft\PowerShell\1\PowerShellEngine" -Name RuntimePreferencence -value 3 -ea Si 
Get-WindowsOptionalFeature -O -F MicrosoftWindowsPowerShellV2 -Ea Si 

#włączenie constrainedlanguage - trzeba pamiętać o restarcie powershella przed wykonaniem tej komedny + admin
$ExecutionContext.SessionState.LanguageMode = "FullLanguage"

#wyłączenie constrainedlanguage 
$ExecutionContext.SessionState.LanguageMode = "ConstrainedLanguage"

#changing ownership
$path = "$home\AppData\Local\Microsoft\Windows\History\low";$acl = Get-Acl $path;$acl.SetOwner([System.Security.Principal.NTAccount]::new((whoami)));Set-Acl $Path $acl

#wyciąganie klass z cim
Get-CimClass -n 'root/cimv2' | where cimclassname -li "*whatever*"

#wyciąganie klas wmi
gwmi -Li

#menedżer urządzeń w powershellu
Get-PnpDevice | select -Property *

#wyciągnięcie dysków w komputerze
get-physicaldisk

#dyski i partycje
Get-Disk | Get-Partition | Format-Table -AutoSize

#usuwanie plików o konkretnych rozszerzeniach z danego folderu i jego podfolderów
$command=gci $home\Desktop\Screenshots -Rec|where{$_.extension -eq ".png" -or $_.Extension -eq ".jpg"};for(){if($command -ne $null){$command|%{ri -fo $_.Fullname -ea si}}}

#podmiana authorization managera: 
($ctx=$ExecutionContext.GetType().GetField("_context","nonpublic,instance").GetValue($ExecutionContext)).GetType().GetField("_authorizationManager","nonpublic,instance").SetValue($ctx, (New-Object System.Management.Automation.AuthorizationManager "Microsoft.PowerShell"))

gc C:\ -Recurse | gi -Stream * | where Stream -ne ':$DATA' | select FileName, Stream

#użycie komendy do przeniesienia się do rdp
mstsc /v:hostname


