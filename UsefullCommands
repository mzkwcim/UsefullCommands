#Sprawdzenie numerów seryjnych monitorów
Get-WmiObject wmimonitorid -Namespace root\wmi | ForEach-Object{($_.SerialnumberID | ForEach-Object{[char]$_}) -join ""} 

#linia wyciągająca klucz windowsa 
Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SoftwareProtectionPlatform\' | Select-Object -ExpandProperty backupproductkeydefault

#do usuwania rejestrów zawierających specyficzną nazwę
Invoke-Command -ComputerName (hostname) -ScriptBlock {
    Get-ChildItem -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\" |
    Where-Object { $_.PSChildName -like "{90160000-*" } |
    ForEach-Object {
       Remove-Item -Path "Registry::$_" -Recurse
       Write-Output "Registry::$_"
    }
}

#Sprawdzanie katalogu macierzystego dla konkretnego usera w domenie bez użycia rozszerzenia activedirectory
((net user ar384 /domain | find "Katalog macierzysty") | Select-String "Katalog macierzysty") -replace "Katalog macierzysty\s+", ""

#wylistowanie unikalnych grup w podfolderach wskazanego folderu:
$dirPath = "C:"
$subDirectories = (Get-ChildItem -Path $dirPath).FullName
$groupList = New-Object -TypeName System.Collections.ArrayList
foreach ($subDirectory in $subDirectories)
{
    $acl = Get-acl -Path $subDirectory
    $groups = $acl.Access | Where-Object { $_.IdentityReference -is [System.Security.Principal.NTAccount] } | Select-Object -ExpandProperty IdentityReference
    $groupList.AddRange($groups)
}
$uniqueGroups = $groupList | ForEach-Object { $_.ToString().ToLower() } | Select-Object -Unique
$uniqueGroups

#wylistowanie wszystkich folderów z paska szybkiego dostępu i zapisanie ich do pliku tekstowego 
(New-Object -ComObject Shell.Application).Namespace('shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}').Items() | Where-Object { $_.IsFolder } | ForEach-Object { $_.Path } | Out-File -FilePath "$env:userprofile\desktop\listaSzybkiegoDostpu.txt"

#Dodania folderów do paska szybkiego dostępu z listy z pliku txt
foreach($path in (Get-Content $env:userprofile\desktop\listaplików.txt)) { (new-object -com shell.application).Namespace($path).Self.InvokeVerb("pintohome") }

#Zmiana skutku zamknięcia pokrywy 0 - nic nie rób 1 - uśpij 2 - hibernacja 3 - zamknij
#podłączony
powercfg -SETDCVALUEINDEX 381b4222-f694-41f0-9685-ff5bb260df2e 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 0
#niepodłączony
powercfg -SETACVALUEINDEX 381b4222-f694-41f0-9685-ff5bb260df2e 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 0

#szybkie wyciągnięcie systemu operacyjnego
systeminfo | Select-String "OS name"

#Wyłączenie GUI w windowsie
 taskkill /f /im explorer.exe

#Zmiana hasła 
Set-LocalUser -Name $env:USERNAME -Password (ConvertTo-SecureString -AsPlainText "YourPassword" -Force)

#Dodanie skryptu przy uruchomieniu PowerShella
$DoesExist = Test-Path $profile.CurrentUserAllHosts
$command = 'gcm | Get-Random | Get-Help -Full'
if ($DoesExist -ne $true){
    New-Item -Path $profile.CurrentUserAllHosts -ItemType File -Force
    echo 'Write-Host '$command | Out-File -Append -FilePath $profile.CurrentUserAllHosts
    Write-Host "The profile has been created"
    Write-Host "Command has been Added to the profile"
}
elseif((Get-Content $profile.CurrentUserAllHosts -Raw) -notcontains 'gcm | Get-Random | Get-Help -Full'){
    echo 'Write-Host '$command | Out-File -Append -FilePath $profile.CurrentUserAllHosts
    Write-Host "Profile already exists and command has been added"
}

#Skrypt powitania w powershellu z syntezą mowy
$DoesExist = Test-Path $profile.CurrentUserAllHosts
$command = 'Add-Type -AssemblyName System.Speech'
$command2 = '[Speech.Synthesis.SpeechSynthesizer]::new().Speak("Chciałem wam bardzo podziękować za te 10 miesięcy praktyk, bardzo dużo sie nauczyłem i jestem wam bardzo wdzięczny")'
if ($DoesExist -ne $true){
    New-Item -Path $profile.CurrentUserAllHosts -ItemType File -Force
    echo 'Write-Host '$command | Out-File -Append -FilePath $profile.CurrentUserAllHosts
    echo 'Write-Host '$command2 | Out-File -Append -FilePath $profile.CurrentUserAllHosts
    Write-Host "The profile has been created"
    Write-Host "Command has been Added to the profile"
}
elseif((Get-Content $profile.CurrentUserAllHosts -Raw) -notcontains 'gcm | Get-Random | Get-Help -Full'){
    echo 'Write-Host '$command | Out-File -Append -FilePath $profile.CurrentUserAllHosts
    echo 'Write-Host '$command2 | Out-File -Append -FilePath $profile.CurrentUserAllHosts
    Write-Host "Profile already exists and command has been added"
}

#Sprawdzanie co się odpala po starcie maszyny
Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\run

#Sprawdzanie czy nic się nie odpala przy odpalaniu normalnych aplikacji
Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\*' | Where-Object debugger | Select-Object PSChildName,Debugger

#odapalanie kalkulatora przez odpalanie painta
New-Item -Force "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\mspaint.exe" | Set-ItemProperty -name Debugger -Value "powershell -c Invoke-WebRequest calc#"


