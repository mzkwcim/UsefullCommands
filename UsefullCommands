#Sprawdzenie numerów seryjnych monitorów
Get-WmiObject wmimonitorid -Namespace root\wmi | ForEach-Object{($_.SerialnumberID | ForEach-Object{[char]$_}) -join ""} 

#linia wyciągająca klucz windowsa 
Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SoftwareProtectionPlatform\' | Select-Object -ExpandProperty backupproductkeydefault
(wmic path softwarelicensingservice get OA3xOriginalProductKey)[2]

#do usuwania rejestrów zawierających specyficzną nazwę
Invoke-Command -ComputerName (hostname) -ScriptBlock {
    Get-ChildItem -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\" |
    Where-Object { $_.PSChildName -like "{90160000-*" } |
    ForEach-Object {
       Remove-Item -Path "Registry::$_" -Recurse
       Write-Output "Registry::$_"
    }
}

#do sprawdzania wielkości folderu
function Get-Size(){ 
    [CmdletBinding()] 
    param( 
        [parameter(Mandatory=$true, Position=0)] 
        [string]$path, 
        [parameter(Mandatory=$false, Position=1)] 
        [int]$size 
    ) 
    $fullSize = 0 
    $items = Get-ChildItem $path 

    foreach($item in $items){ 
        if ((gi $item).FullName -is [System.IO.DirectoryInfo]){ 
            $fullSize = Get-Size (gi $item).FullName 
        } else { 
            $fullSize += [int](gi $item).Length 
        } 
    } 
    return $fullSize/1MB 
} 

#Sprawdzanie katalogu macierzystego dla konkretnego usera w domenie bez użycia rozszerzenia activedirectory
((net user ar384 /domain | find "Katalog macierzysty") | Select-String "Katalog macierzysty") -replace "Katalog macierzysty\s+", ""

#wylistowanie unikalnych grup w podfolderach wskazanego folderu:
$dirPath = "C:"
$subDirectories = (Get-ChildItem -Path $dirPath).FullName
$groupList = New-Object -TypeName System.Collections.ArrayList
foreach ($subDirectory in $subDirectories)
{
    $acl = Get-acl -Path $subDirectory
    $groups = $acl.Access | Where-Object { $_.IdentityReference -is [System.Security.Principal.NTAccount] } | Select-Object -ExpandProperty IdentityReference
    $groupList.AddRange($groups)
}
$uniqueGroups = $groupList | ForEach-Object { $_.ToString().ToLower() } | Select-Object -Unique
$uniqueGroups

#wylistowanie wszystkich folderów z paska szybkiego dostępu i zapisanie ich do pliku tekstowego 
(New-Object -ComObject Shell.Application).Namespace('shell:::{679f85cb-0220-4080-b29b-5540cc05aab6}').Items() | Where-Object { $_.IsFolder } | ForEach-Object { $_.Path } | Out-File -FilePath "$env:userprofile\desktop\listaSzybkiegoDostpu.txt"

#Dodania folderów do paska szybkiego dostępu z listy z pliku txt
foreach($path in (Get-Content $env:userprofile\desktop\listaplików.txt)) { (new-object -com shell.application).Namespace($path).Self.InvokeVerb("pintohome") }

#Zmiana skutku zamknięcia pokrywy 0 - nic nie rób 1 - uśpij 2 - hibernacja 3 - zamknij
#podłączony
powercfg -SETDCVALUEINDEX 381b4222-f694-41f0-9685-ff5bb260df2e 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 0
#niepodłączony
powercfg -SETACVALUEINDEX 381b4222-f694-41f0-9685-ff5bb260df2e 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 0

#szybkie wyciągnięcie systemu operacyjnego
((systeminfo | Sls "OS N") -replace ".+:").Trim()

#Wyłączenie GUI w windowsie
 taskkill /f /im explorer.exe

#Zmiana hasła 
Set-LocalUser -Name $env:USERNAME -Password (ConvertTo-SecureString -AsPlainText "YourPassword" -Force)

#Sprawdzanie co się odpala po starcie maszyny
Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\run

#Sprawdzanie czy nic się nie odpala przy odpalaniu normalnych aplikacji
Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\*' | Where-Object debugger | Select-Object PSChildName,Debugger

#odapalanie kalkulatora przez odpalanie painta
New-Item -Force "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\mspaint.exe" | Set-ItemProperty -name Debugger -Value "powershell -c Invoke-WebRequest calc#"

#listowanie liter a do z
[char[]] ([int][char]'a'..[int][char]'z')

#feed
Invoke-RestMethod -UseBasicParsing example.pl/example 

#something 
F10+Shift; c:; move c:\Windows\System32\utilman.exe c:\Windows\System32\utilman.exe.bak; copy c:\Windows\System32\cmd.exe c:\Windows\System32\utilman.exe; turn of, turn on

#wyłączenie bitlockera
Disable-BitLocker -MountPoint "C:" -RebootCount 0 -Confirm:$false

#clipboard monitor
$previousClipboardContent = Get-Clipboard -Format Text
while ($true) {
    if ((Get-Clipboard -Format Text) -ne $previousClipboardContent) {
        (Get-Clipboard -Format Text) | Out-File -Append -LiteralPath "$home\Desktop\Logger.txt"
        $previousClipboardContent = Get-Clipboard -Format Text
    }
    Start-Sleep -Seconds 1
}

#przywileje użytkownika 
whoami /priv

#ścieżka do dowolnego katalogu
[system.environment]::GetFolderPath("desktop")

#always show file extension 
sp HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced HideFileExt 0

#alwyas hide file extension
sp HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced HideFileExt 1

#set hidden files as visible
sp HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced Filter 0
sp HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced Hidden 0

#set hidden files as hidden
sp HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced Filter 1
sp HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced Hidden 1

#set hidden system files as visible
sp HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced ShowSuperHidden 1

#set hidden system files as unvisible
sp HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced ShowSuperHidden 0

#wypisanie pamięci RAM
(wmic memorychip list full | sls "Cap") -replace ".+="

#one liner zwracający listę dostępnych aktualizacji
(New-Object -ComObject Microsoft.Update.Session).CreateUpdateSearcher().Search("IsInstalled=0").Updates | select title




