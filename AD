#wyciąganie userid po imieniu i nazwisku
get-aduser -Filter "surname -like 'krakowiak' -and givenname -like 'waldemar'" | select -ExpandProperty name

#wyciąganie samej nazwy użytkownika bez active directory
((net user $env:username /domain | Sls "Nazwa u") -replace "nazwa \w+").Trim()

#wyciąganie userów 
Get-ADUser -Filter {Enabled -eq $true -and UserPrincipalName -notlike '*_*'} -SearchScope Subtree -Properties Title, UserPrincipalName

#wyciąganie userów  Z poszczególnych OU
Get-ADUser -filter * -searchbase "given OU" 

#listowanie OUsów warstwa po warstwie:
Get-ADOrganizationalUnit -Filter * -SearchBase "dc=corp,dc=wtct,dc=net" -Server 10.90.1.5 -SearchScope onelevel | % {
    $_.DistinguishedName
    Get-ADOrganizationalUnit -Filter * -SearchBase $_.DistinguishedName -Server 10.90.1.5 -SearchScope onelevel | % {
        "`t- $_"
    }
}
function Generate-Password {
    param(
      [Parameter(Mandatory = $true)]
      [int]$Length = 12
    )

    $lowercase = "abcdefghijklmnopqrstuvwxyz"
    $uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    $numbers = "0123456789"
    $symbols = "!@#$%^&*()-_=+[]{}|;:',./?`~"

    $password = [SecureString]::new()

    $password.AppendChar($lowercase[[char](Get-Random -Maximum $lowercase.Length)])
    $password.AppendChar($uppercase[[char](Get-Random -Maximum $uppercase.Length)])
    $password.AppendChar($numbers[[char](Get-Random -Maximum $numbers.Length)])
    $password.AppendChar($symbols[[char](Get-Random -Maximum $symbols.Length)])

    $allChars = $lowercase + $uppercase + $numbers + $symbols
    for ($i = 0; $i -lt $Length - 4; $i++) {
      $password.AppendChar($allChars[(Get-Random -Maximum $allChars.Length)])
    }

    return $password
}

#przykładowe tworzenie użytkowników i nadawanie im wartości:
$users = @()
$usernames = @()
$names = @()
$surnames = @()
$fullnames = @()
$path = "OU=Customers,OU=3rd Party,OU=Accounts,OU=WTCT,DC=corp,DC=wtct,DC=net"
for($i = 1; $i -lt $users.Count; $i++){
    $securePassword = Generate-Password -Length 16
    echo $i
    echo $fullnames[$i]
    New-ADUser -Server 10.90.1.5 -name $fullnames[$i] `
        -GivenName $names[$i] `
        -Surname $surnames[$i] `
        -SamAccountName $usernames[$i] `
        -UserPrincipalName $users[$i] `
        -Path $path `
        -AccountPassword $securePassword `
        -Enabled $true `

    Set-ADUser -Server 10.90.1.5 -Identity $usernames[$i] `
    -EmailAddress $users[$i] `
    -Description "HELPIT-3558" `
    -Displayname $fullnames[$i]
    @("AD_JIRA_External", "AD_JIRA_HMEPM_Customers", "AD_JIRA_HMECS_Customers", "AD_JIRA_CHA_Customers") | % {Add-ADGroupMember -Identity $_ -Members $usernames[$i] -Server 10.90.1.5}
}


#getting recursive list of reports
function Get-DirectReportsRecursively {
    param (
        [string]$UserDN,
        [string]$Server = "10.90.1.5",
        [string]$indent = ""
    )
    $user = Get-ADUser -Identity $UserDN -Server $Server -Properties directReports, mail
    Write-Output "$indent$($user.mail)"
    if ($user.directReports) {
        foreach ($report in $user.directReports) {
            Get-DirectReportsRecursively -UserDN $report -Server $Server -indent "$indent`t"
        }
    }
}





